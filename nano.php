<?php


/**
 * Nano File Management System
 */


// Settings
define('ROOT', __DIR__ . '/root');
define('READ_ONLY', true);


// Values will be auto-generated by the system
$the_mtime = filemtime(__FILE__);
$the_s = DIRECTORY_SEPARATOR;
$the_root = strtr(rtrim(ROOT ?: __DIR__, "\\/"), [
    "\\" => $the_s,
    '/' => $the_s
]);
$the_rules = strtr($_GET['task'] ?? "", [$the_s => '/']);

$the_rules_parts = explode(':', $the_rules, 2);
$the_task = $the_rules_parts[0] ?: 'g';
$the_path = rtrim($the_root . $the_s . ($the_rules_parts[1] ?? ""), $the_s);

$the_view  = '<!DOCTYPE html>';
$the_view .= '<html dir="ltr">';
$the_view .= '<head>';
$the_view .= '<meta content="width=device-width" name="viewport">';
$the_view .= '<meta charset="utf-8">';
$the_view .= '<title>%1$s</title>';
$the_view .= '<link href="?css=' . $the_mtime . '" rel="stylesheet">';
$the_view .= '</head>';
$the_view .= '<body>%2$s';
$the_view .= '<script src="?js=' . $the_mtime . '"></script>';
$the_view .= '</body>';
$the_view .= '</html>';


$is_file = is_file($the_path);
$is_folder = is_dir($the_path);
$is_read_only = !is_writable($the_path);

$the_type = mime_content_type($the_path);

$is_text = $the_type && (0 === strpos($the_type, 'text/') || 'image/svg+xml' === $the_type);


if (!empty($_GET['css'])) {
    header('Content-Type: text/css');
    header('Cache-Control: max-age=2592000'); // 30 days
echo <<<CSS

* {
  margin: 0;
  padding: 0;
  font: inherit;
  list-style: none;
  box-sizing: border-box;
}

a {
  text-decoration: none;
  color: #00f;
}

a:focus {
  color: #f00;
}

html {
  font: normal normal 13px/1.6 sans-serif;
  background: #fff;
  color: #000;
}

body {
  padding: 1em;
}

b, h1, h2, h3, h4, h5, h6, strong, th {
  font-weight: bolder;
}

h1 {
  font-size: 200%;
}

h2 {
  font-size: 180%;
}

h3 {
  font-size: 160%;
}

h4 {
  font-size: 140%;
}

h5 {
  font-size: 120%;
}

* + blockquote,
* + h1,
* + h2,
* + h3,
* + h4,
* + h5,
* + h6,
* + ol,
* + p,
* + pre,
* + table,
* + ul {
  margin-top: 1rem;
}

p[ondrop] {
  background: rgba(0, 0, 0, .05);
  border: 1px dashed rgba(0, 0, 0, .25);
  color: rgba(0, 0, 0, .5);
  padding: 1em 1.5em;
  border-radius: 1px;
  cursor: pointer;
}

p[ondrop]:focus,
p[ondrop]:hover,
p[ondrop].over {
  color: inherit;
  border-color: rgba(0, 0, 0, .5);
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  text-align: left;
  padding: 0 .5em;
  vertical-align: top;
}

th {
  border-bottom: 2px solid;
}

th:first-child,
td:first-child {
  padding-left: 0;
}

th:last-child,
td:last-child {
  padding-right: 0;
}

th + th,
td + td {
  width: 1px;
  white-space: nowrap;
}

main {
  margin: 1em 0;
}

CSS;
} else if (!empty($_GET['js'])) {
    header('Content-Type: application/javascript');
    header('Cache-Control: max-age=2592000'); // 30 days
echo <<<JS

function doDrop(e) {
    let view = e.currentTarget.firstChild,
        items, names = [];
    e.preventDefault();
    if (items = e.dataTransfer.items) {
        for (let i = 0, j = items.length; i < j; ++i) {
            if ('file' !== items[i].kind) {
                continue;
            }
            let file = items[i].getAsFile();
            names.push(file.name);
        }
    } else if (items = e.dataTransfer.files) {
        for (let i = 0, j = items.length; i < j; ++i) {
            names.push(items[i].name);
        }
    }
    if (names.length) {
        view.innerHTML = names.join('<br>');
    }
    e.currentTarget.classList.remove('over');
}

function doOver(e) {
    e.currentTarget.classList.add('over');
    e.preventDefault();
}

function doEnd(e) {
    e.currentTarget.classList.remove('over');
}

function doEnter(e) {}

function doLeave(e) {
    e.currentTarget.classList.remove('over');
}

JS;
} else {
    $the_content  = '<header>';
    $the_content .= '<h1>%1$s</h1>';
    $the_content .= '</header>';
    $the_content .= '<main>';
    $the_content .= '%2$s';
    $the_content .= '</main>';
    $the_content .= '<footer>';
    $the_content .= '</footer>';

    $d = dirname($r = $the_rules_parts[1] ?? "");
    if ('g' === $the_task) {
        $the_table  = '<form action="nano.php" enctype="multipart/form-data" method="post">';
        $the_table .= '<p ondragend="doEnd(event);" ondragenter="doEnter(event);" ondragleave="doLeave(event);" ondragover="doOver(event);" ondrop="doDrop(event);"><span>Drop files here&hellip;</span></p>';
        $the_table .= '</form>';
        $the_table .= '<table>';
        $the_table .= '<thead>';
        $the_table .= '<tr>';
        $the_table .= '<th>Name</th>';
        $the_table .= '<th title="Date Create">Date</th>';
        $the_table .= '<th title="File Permission">Mode</th>';
        $the_table .= '<th></th>';
        $the_table .= '</tr>';
        $the_table .= '</thead>';
        $the_table .= '<tbody>';
        foreach (glob($the_path . $the_s . '*', GLOB_MARK) as $f) {
            $c = filectime($f);
            $n = basename($f);
            $the_table .= '<tr>';
            $the_table .= '<td>';
            $the_table .= '/' === substr($f, -1) ? '<a href="nano.php?task=g:' . ($r ? $r . '/' . $n : $n) . '">' . $n . "\\</a>" : $n;
            $the_table .= '</td>';
            $the_table .= '<td><time datetime="' . date('c', $c) . '">' . date('Y/m/d H:i:s', $c) . '</time></td>';
            $the_table .= '<td>' . substr(sprintf('%o', fileperms($f)), -4) . '</td>';
            $the_table .= '<td><a href="nano.php?task=p:' . ($r ? $r . '/' . $n : $n) . '">Edit</a>&nbsp;<a href="nano.php?task=d:' . ($r ? $r . '/' . $n : $n) . '">Delete</a></td>';
            $the_table .= '</tr>';
        }
        $the_table .= '</tbody>';
        $the_table .= '</table>';
        $p = $the_root !== $the_path ? '<a href="nano.php' . ($d && '.' !== $d ? '?task:' . $d : "") . '">..</a>' : '.';
        $the_content = sprintf($the_content, 'Index of ' . $p . "\\" . strtr($r, [$the_s => "\\"]), $the_table);
    }

    $the_title = "";
    echo sprintf($the_view, $the_title ? $the_title . ' &middot; Nano' : 'Nano', $the_content);
}
